{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","obj","GifExpertApp","categories","setcategories","item","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAAAP,GAAC,OAAIF,EAAeE,EAAEQ,OAAOF,a,+BCP9CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAWH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,kCAAMJ,EAAN,OACA,qBAAKK,IAAMf,EAAMgB,IAAMN,QCHtBO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECFwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAEpB,IAEEqB,EDdwBK,CAAc1B,GAAhCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,mCAAMpB,KACN,sBAAKgB,UAAU,YAAf,UACMI,GAAW,4CAETP,EAAOJ,KAAK,SAAAkB,GAAG,OACX,cAAC,EAAD,eAEQA,GADEA,EAAIhB,cEWvBiB,EAtBM,WAGjB,MAAoC1C,mBAAS,CAAC,KAA9C,mBAAO2C,EAAP,KAAmBC,EAAnB,KAEA,OAAQ,qCACJ,8CACA,cAAC,EAAD,CAAa7C,cAAgB6C,IAC7B,uBAEA,6BAEQD,EAAWpB,KAAK,SAAAsB,GAAI,OAChB,cAAC,EAAD,CAEI/B,SAAW+B,GADLA,YCd9BC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.26b61490.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = e => setInputValue( e.target.value);\n\n    const handleSubmit = e => { \n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ){\n\n            setCategories( cats => [inputValue, ...cats ]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=LsbydioK5hy3ONtkKCP7djtQeDq8BlJ8`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        };\n    });\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__zoomIn\">\n            <p> { title } </p>\n            <img src={ url } alt={ title }/>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images, loading}= useFetchGifs( category );\n\n    return (\n        <>\n            <h3> {category}</h3>  \n            <div className=\"card-grid\">\n                { loading && <p>Cargando...</p>}\n                {\n                    images.map( obj => (\n                        <GifGridItem \n                            key={ obj.id }\n                            {...obj}\n                        />\n                    ))\n                }                \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n            })\n        })\n    }, [ category ])\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n\n    const [categories, setcategories] = useState(['']);\n\n    return (<>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={ setcategories }/>\n        <hr />\n        \n        <ol>\n            {\n                categories.map( item => \n                    <GifGrid \n                        key={ item }\n                        category={ item } />     \n                )\n            }\n        </ol>\n    </>)\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}